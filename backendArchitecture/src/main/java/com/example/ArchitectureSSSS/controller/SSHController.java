package com.example.ArchitectureSSSS.controller;

//Bu sÄ±nÄ±fÄ±n gÃ¶revi:
// KullanÄ±cÄ±dan gelen komutu alÄ±p, SSH Ã¼zerinden Ã§alÄ±ÅŸtÄ±rmak ve sonucu veritabanÄ±na kaydetmek.


import com.example.ArchitectureSSSS.entity.CommandLog;                   //- `CommandLog`: Komut geÃ§miÅŸini temsil eden sÄ±nÄ±f.
import com.example.ArchitectureSSSS.repository.CommandLogRepository;     //- `CommandLogRepository`: KomutlarÄ± veritabanÄ±na kaydetmek iÃ§in kullanÄ±lÄ±r.
import com.example.ArchitectureSSSS.service.SSHService;                  //- `SSHService`: SSH baÄŸlantÄ±sÄ±nÄ± ve komut Ã§alÄ±ÅŸtÄ±rmayÄ± yapan servis.
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;                          //- `ResponseEntity`: HTTP cevabÄ± iÃ§in.
import org.springframework.web.bind.annotation.*;                        //- `@RestController`, `@RequestMapping`, `@PostMapping`, `@RequestBody`: Springâ€™in web isteklerini yakalamak iÃ§in kullandÄ±ÄŸÄ± Ã¶zel iÅŸaretler.


import java.time.LocalDateTime;
import java.util.Map;

@RestController
@RequestMapping("/api/ssh")

//  Bu sÄ±nÄ±f, bir web isteÄŸini dinleyecek anlamÄ±na gelir.
//  api/ssh adresine gelen istekleri dinler.


public class SSHController {

    private final CommandLogRepository commandLogRepository;  //VeritabanÄ±na komut kayÄ±tlarÄ±nÄ± eklemek iÃ§in.
    private final SSHService sshService;                      //SSH ile uzak sunucuya baÄŸlanÄ±p komut Ã§alÄ±ÅŸtÄ±rmak iÃ§in.

    @Autowired  // ğŸ›  Spring framework, bu sÄ±nÄ±fÄ± **baÅŸlatÄ±rken**, gerekli servisleri otomatik olarak getiriyor. Yani sen elle oluÅŸturmak zorunda kalmÄ±yorsun.
    public SSHController(CommandLogRepository commandLogRepository, SSHService sshService) {
        this.commandLogRepository = commandLogRepository;
        this.sshService = sshService;
    }
                                                   // Bu metod, bir HTTP POST isteÄŸi alÄ±r. Yani dÄ±ÅŸardan birisi /api/ssh/execute adresine bir komut gÃ¶nderdiÄŸinde bu Ã§alÄ±ÅŸÄ±r.
    @PostMapping("/execute")
    public ResponseEntity<?> executeCommand(@RequestBody Map<String, String> payload) {  //JSON formatÄ±nda gelen veriyi bir harita gibi alÄ±r.
        String host = payload.get("ip");
        String user = payload.get("user");             //JSONâ€™dan gelen deÄŸerleri tek tek deÄŸiÅŸkenlere alÄ±yoruz.
        String password = payload.get("password");
        String command = payload.get("command");

        if (host == null || user == null || password == null || command == null) {
            return ResponseEntity.badRequest().body("Eksik parametre");            //KullanÄ±cÄ± eksik bilgi gÃ¶nderirse, hata dÃ¶neriz: "Eksik parametre"
        }

        String output = sshService.executeCommand(host, user, password, command);  //ğŸš€ SSH baÄŸlantÄ±sÄ±nÄ± aÃ§Ä±p, komutu Ã§alÄ±ÅŸtÄ±rmak iÃ§in `sshService` Ã§aÄŸrÄ±lÄ±yor.


        System.out.println("Komut Ã§Ä±ktÄ±sÄ±: \n" + output); // Debug iÃ§in loglama      ğŸ–¨ Konsola Ã§Ä±ktÄ±yÄ± basÄ±yoruz. Bu sadece geliÅŸtirici iÃ§in, uygulamanÄ±n iÃ§inde gÃ¶rÃ¼nmez.



        CommandLog log = new CommandLog();
        log.setHost(host);
        log.setUsername(user);
        log.setCommand(command);
        log.setOutput(output);
        log.setTimestamp(LocalDateTime.now());

        commandLogRepository.save(log);              // Yeni bir komut kaydÄ± oluÅŸturuyoruz:
                                                     //- IP, kullanÄ±cÄ± adÄ±, komut, Ã§Ä±ktÄ± ve zaman bilgisi ekleniyor.
                                                     //- `save(...)` metodu ile veritabanÄ±na **kayÄ±t** yapÄ±yoruz

        return ResponseEntity.ok(output);            // Komutun Ã§Ä±ktÄ±sÄ±nÄ± kullanÄ±cÄ±ya geri dÃ¶neriz. HTTP 200 (baÅŸarÄ±lÄ±) ile birlikte.
    }
}
